clear //This clears the terminal
ls 
mkdir project //This creates a new folder 
mkdir <NAME OF FOLDER> //Creating a folder
cd project //For navigating up folder 
use cd .. for navigating down 
git init //This will initialize the current folder as a git repository. This history of the current folder can now be maintained. 
ls  //This is the list command. It displays the list of all the files and folders in the current directory
ls -a //This command displays all the hidden files for git bash
ls -hidden //This is the command for windows
ls .git //To view what is inside the .git file: 


New Command: 
echo "Content inside of the file" > filename.txt // THis is the command for windows
touch <filename with extension> //Creating a file //This is the command for linux and mac 
git status //This is the command which tells us about the status of current changes 
Untracked ka matlab ki agar repo ko share kiya jaye to ye changes samne vale ko nahi dikhenge. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git add . //this will add all the files in the current directory(all the untracked files) OR use git add names.txt for adding specific files. Here, if we use the "." in the add command, it will stage all the untracked changes
(color of untracked files changes from red to green at git status)
git commit -m "This is my first commit" // -m stands for the message 

When you make changes to a file in your working directory, Git does not track those changes until you stage them. You can use the git add command to stage one or more files. Once you have staged the files, you can commit them to the project history using the git commit command.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//For writing anything into a file

vi <filename with extension> // Entering or opening the file
Perform the entries
Press esc
Then type :x or :wq//It will save and exit OR
Type :w // This will save and not exit
For renaming type :w [name of the file without extension]
To exit without saving, type :q!
For viewing whats in the file type cat <filename with extension>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git restore --staged names.txt
git status
git add .
git status
git commit -m "names.txt file was modified"
git log 
---------------------------------------
For deleting a file rm -rf names.txt
---------------------------------------
git add .
git commit -m "names.txt file deleted"
git status
git log
--------------------------------------
For getting or restoring the code at a certain time 
git reset bfa0cb4540dd4c1cb334e44177fb55216c0bd1f2
 git log 
git status

git add .
git status
touch surnames.txt
git add .   
git status

vi surnames.txt
Agrawal //this is the change
touch surnames.txt
git add .
git status

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Agar apan chahte hai ki last commit ke baad jo changes apan ne kiye hai vo sab changes backstage me kahi chale jaye aur current project me display na ho. Aur jab apni marzi kare tab un changes ko vapas le aaye, uske liye stashing use hoti hai
Procedure:
1) Perform the changes you want to stash
2) git add . //Isse changes staging area me aa jayenge. Matlab ab git in changes ko track kar skta hai
3) git stash  //Isse last commit k baad kiye gaye sare changes backstage me chale jayenge(stash ho jayenge).  

Ab agar apan chahte hai ki jo changes stash kiye gaye hai unko vapas laya jaye to uske liye: git stash pop (sare changes vapas aa jayenge) 
 
Ab agar apan chahte hai ki vo changes jo stash kiye gaye hai, vo sare clear ho jaye to uske liye: git stash clear
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

cat names.txt
git stash pop
git add .
git stash 

For removing all the stashed items
git stash clear

If we want to discard all the changes made after the last commit, then
git restore .

GIT ENDS HERE
==================================================================================================================================================================================
#Learning Github

For adding/attaching a (url)github repo 
git remote add origin <link of github repo> //yahan par remote ka matlab hota hai ki apan basically urls pe work karne vale hai, add ka matlab ki remote url add karne vale hai.
Origin is basically a name given to all the repositories of our own personal github account
git remote -v //This will display which remote url is attached to the current repo 
git remote rm  origin OR git remote rm  <url> //For removing the origin 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


git push origin master //This will push the committed changes to the origin 



touch surnames.txt
touch hotel.txt
git add .
git commit -m "hotel.txt added"
touch roll no.txt
git add .
git commit -m "roll no.txt added" 
//Performing some random commtis

ls .

// head is just the pointer
/* below is only for explanation
git branch feature - this is for creating a new branch
git checkout feature //this means that head now points to feature branch 
git checkout main //head now points to main branch
git merge feature - this will merge the feature branch with main branch
*/
git log
git remote -v // CTRL+clickonlink to open on github
git push origin master //For pushing the code to master branch
================================================================
Working with projects
A project which is in someone else's account, we can't make changes directly to it.
For doing so we first have to fork it. doing so will create a copy of that project to our github account now for working on the project we clone it to our system by using 
git clone <link of github code>
//Note: Origin url is our own account
//Note: From where we have forked is upstream url
git remote add upstream <link of github code>

Navigate to the directory 
create a file and make some changes
for commiting create a new branch
git branch aryan
git checkout aryan
git add .
git commit -m "committing to aryan branch"
git log
git push origin aryan

git checkout main

//Following are the command lines to sync your fork with the repo from where you forked it
git fetch --all --prune
git reset --hard upstream master
git log
git push origin main
------------------------------------------
git pull upstream main // this will pull any changes performed in the original repo
=========================================
merging/squashing all the branches into one single branch
create multiple branches and do some basic commits
git rebase -i <link of commit from git log>
squash others and pick the first
git reset --hard // this will uncommited files (unconfirmed)
